name: Continuous Integration
"on":
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
   
permissions: write-all

# A workflow run is made up of one or more jobs run sequentailly or in parallel 
jobs:
  build:
    runs-on: ubuntu-latest
# steps represnt a sequence of tasks executed as part of the job
    steps:
    #checkout your repository under $GITHUB_WORKSPACE, so your job can access it
    - name : Checkout
      uses: actions/checkout@v2
      with: 
        fetch-depth: 0
  
    - uses: paulhatch/semantic-version@v4.0.2
      with:
       # The prefix to use to identify tags
       tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
       major_pattern: "(MAJOR)"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
       minor_pattern: "(MINOR)"
        # A string to determine the format of the version output
       format: "${major}.${minor}.${patch}-prerelease${increment}"
        # Optional path to check for changes. If any changes are detected in the path the
        # 'changed' output will true. Enter multiple paths separated by spaces.
       change_path: "src/my-service"
        # Named version, will be used as suffix for name version tag
       namespace: my-service
        # If this is set to true, *every* commit will be treated as a new version.
       bump_each_commit: false
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
       search_commit_body: false
        # The output method used to generate list of users, 'csv' or 'json'.
       user_format_type: "csv"

        
   # Calculate the version for the build and display the value of the GITVERSION_NUMBER environment varaible
  
#     - name: Semantic Versioning
#       id: versioning
#       uses: PaulHatch/semantic-version@v4.0.2
#       with:
#         branch: main
#         tag_prefix: "v"
#         major_pattern: "BREAKING CHANGE:"
#         minor_pattern: "feat:"
#         format: "v${major}.${minor}.${patch}-prerelease${increment}"
        
      
#     - uses: actions/checkout@v3
#     - uses: rickstaa/action-create-tag@v1
#       with:
#         tag: "v0.2.0"
#         message: "Latest release"
      
#     - name: Create Release
#       uses: actions/create-release@v1
#       id: create_release
#       with:
#           draft: false
#           tag_name: ${{ github.ref }}
#           release_name: ${{ steps.versioning.outputs.version }}
#           prerelease: false
          
#       env:
#        GITHUB_TOKEN: ${{ github.token }}
